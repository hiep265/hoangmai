import gradio as gr
from typing import Dict, Optional
import random
import time
import uuid
import logging
import datetime
import json
import requests
from PIL import Image
from io import BytesIO

from configs import config_system
from handle_request import handle_request, handle_title_conversation, hanle_conversation

logging.basicConfig(
    filename='security/feedback_storage/chat.log',
    level=logging.INFO,
    format='%(asctime)s - %(message)s'
)

class ChatBot:
    def __init__(self):
        self.user_sessions = {}
        self.greetings = [
            "Ch√†o m·ª´ng anh/ch·ªã ƒë√£ tin t∆∞·ªüng mua s·∫Øm t·∫°i Ho√†ng Mai Mobile. Em l√† Di·ªáu Linh, tr·ª£ l√Ω t∆∞ v·∫•n b√°n h√†ng lu√¥n ·ªü ƒë√¢y ƒë·ªÉ h·ªó tr·ª£ v√† t∆∞ v·∫•n mua s·∫Øm. Ch√∫c anh/ch·ªã m·ªôt ng√†y r·ª±c r·ª° v√† th√†nh c√¥ng! üåà",
            "Xin ch√†o! Em l√† Di·ªáu Linh, tr·ª£ l√Ω mua s·∫Øm t·∫°i Ho√†ng Mai Mobile s·∫µn s√†ng t∆∞ v·∫•n cho anh/ch·ªã v·ªÅ s·∫£n ph·∫©m b√™n em. C√≥ ph·∫£i anh ch·ªã ƒëang c√≥ nhu c·∫ßu mua s·∫Øm ph·∫£i kh√¥ng ·∫°. Anh/ch·ªã c√≥ th·ªÉ cho em bi·∫øt m√¨nh ƒëang c·∫ßn mua s·∫£n ph·∫©m g√¨ kh√¥ng ·∫°?",
        ]
        self.last_response = ""

    def get_user_session(self, phone_number):
        if phone_number not in self.user_sessions:
            self.user_sessions[phone_number] = {
                'chat_history': [],
                'last_response': "",
                'session_id': str(uuid.uuid4()),
            }
        return self.user_sessions[phone_number]

    def validate_chat_preconditions(self, user_name, phone_number, address):
        if not user_name or not phone_number or not address:
            raise gr.Error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin (T√™n, S·ªë ƒëi·ªán tho·∫°i, ƒê·ªãa ch·ªâ) tr∆∞·ªõc khi chat!")
        if not phone_number.isdigit() or len(phone_number) < 10:
            raise gr.Error("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!")

    def chat(self, message, history, phone_number, address, user_name, name_bot=None):
        self.validate_chat_preconditions(user_name, phone_number, address)
        session = self.get_user_session(phone_number)

        if not message or message.strip() == "":
            bot_message = random.choice(self.greetings)
            session['last_response'] = bot_message
            session['chat_history'].append(("", bot_message))
            return "", session['chat_history'], []

        input_text = message
        session_id = session.get('session_id', str(uuid.uuid4()))

        response = handle_request(
            InputText=input_text,
            IdRequest=session_id,
            NameBot=name_bot,
            UserName=user_name,
            MemberCode="NORMAL",
            PhoneNumber=phone_number,
            Address=address
        )

        bot_message = response.get("content", "")
        print(response.get("products"))
        if response.get("terms"):
            bot_message += "\n\nTerms: " + ", ".join(response.get("terms"))

        product_images = extract_images_from_response(response)

        buy_html = ""
        for p in response.get("product_confirms", []):
            if p.get("link_product"):
                buy_html += f'<a href="{p["link_product"]}" target="_blank">'
                buy_html += f'<button style="margin:5px;padding:10px;background:#DC143C;color:white;border:none;border-radius:5px;">Mua {p["product_name"]}</button>'
                buy_html += '</a>'

        session['last_response'] = bot_message
        session['chat_history'].append((message, bot_message))

        return "", session['chat_history'], product_images, buy_html
        
    def clear_chat(self, phone_number):
        if phone_number in self.user_sessions:
            self.user_sessions[phone_number] = {
                'chat_history': [],
                'last_response': "",
                'session_id': str(uuid.uuid4())
            }
        return None

def extract_images_from_response(response_json):
    images = []
    try:
        for product in response_json.get("products", []):
            url = product.get("link_image", "")
            if url:
                img_response = requests.get(url)
                img = Image.open(BytesIO(img_response.content))
                name = product.get("product_name", "S·∫£n ph·∫©m")
                images.append((img, name))
    except Exception as e:
        print(f"L·ªói khi x·ª≠ l√Ω ·∫£nh: {e}")
    return images

chatbot = ChatBot()

def get_session_choices(phone_number):
    result = handle_title_conversation(phone_number=phone_number)
    sessions = result.get("data", [])
    choices = [f"{s['session_id']} - {s['title']}" for s in sessions]
    default = choices[0] if choices else None
    return gr.update(choices=choices, value=default)

def load_chat_session(selected_session, phone_number):
    if not selected_session:
        return [], "", []
    
    session_id = selected_session.split(" - ")[0]
    conversation = hanle_conversation(phone_number, session_id)
    chat_history = []
    data = conversation.get("data", []) if conversation else []

    for msg_item in data:
        human = msg_item.get("human", "")
        ai = msg_item.get("ai", "")
        chat_history.append((human, ai))

    chatbot.user_sessions[phone_number] = {
        'chat_history': chat_history,
        'last_response': chat_history[-1][1] if chat_history else "",
        'session_id': session_id
    }

    return chat_history, "", []

def new_session_handler(phone_number):
    if phone_number:
        chatbot.clear_chat(phone_number)
        return [], "", []
    return [], "", []

def recommend_handler(text):
    return text

# --- Gradio Interface ---
with gr.Blocks(css="""
    #chatbot { 
        height: 400px; 
        overflow-y: hidden; 
        border: 1px solid #ddd; 
        border-radius: 15px; 
        padding: 20px;
        background-color: #f7f7f7;
    }
    .user, .bot { 
        padding: 10px 15px; 
        border-radius: 20px; 
        margin: 5px;
    }
    .user { 
        background-color: #F08080; 
        color: black;
    }
    .bot { 
        background-color: #F0F8FF; 
        color: black;
    }
    #input-row {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-top: 10px;
    }
    #input-row .gr-textbox {
        flex-grow: 5;
    }
    #input-row .gr-button {
        flex-grow: 1;
    }
    #input-row .gr-html {
        flex-grow: 2;
        min-width: 150px;
    }

    #input-row button {
        background-color: #DC143C !important;
        color: white !important;
        border: none !important;
        border-radius: 5px;
        padding: 8px 16px;
    }
    #input-row button:hover {
        background-color: #B22222 !important;
    }


""") as demo:
    with gr.Row():
    #     with gr.Column(scale=5, elem_id="logo-col"):
    #         gr.Image(value="static/logo_HMMobile.png", width=500, show_label=False)
        # gr.HTML("""
        #     <div style="text-align:center;">
        #         <img src="https://hoangmaimobile.vn/images/config/logo.svg" style="width: 320px;" />
        #     </div>
        # """)
        gr.HTML("""
            <div style="text-align:center;">
                <a href="https://hoangmaimobile.vn/" target="_blank">
                    <img src="https://hoangmaimobile.vn/images/config/logo.svg" style="width: 320px;" />
                </a>
            </div>
        """)
        
    # with gr.Row():
    #     with gr.Column(scale=1):
    #         gr.Markdown("## Chatbot t∆∞ v·∫•n b√°n h√†ng ü§ñ")
    
    with gr.Row():
        with gr.Column(scale=3):
            chatbot_interface = gr.Chatbot(
                elem_id="chatbot",
                avatar_images=("static/avt_user.png", "static/avt_bot.png")
            )
            with gr.Row(elem_id="input-row"):
                msg = gr.Textbox(show_label=False, placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n ·ªü ƒë√¢y...", scale=5)
                submit_btn = gr.Button("G·ª≠i", variant="primary", scale=1)
                buy_now_html = gr.HTML(label="N√∫t mua", visible=True)
            with gr.Row():
                recommend_1 = gr.Button("Cho t√¥i xem danh s√°ch s·∫£n ph·∫©m b√™n b·∫°n?")
                recommend_2 = gr.Button("T√¥i c·∫ßn t√¨m h·ªôp ƒë·ªÉ t√¥ v√≠t?")
            with gr.Row():
                recommend_3 = gr.Button("C√≥ b√°n ƒë·ªìng h·ªì v·∫°n nƒÉng kh√¥ng?")
                recommend_4 = gr.Button("Th√¥ng tin ƒë·ªãa ch·ªâ c·ªßa shop ·ªü ƒë√¢u?")
            image_gallery = gr.Gallery(label="H√¨nh ·∫£nh s·∫£n ph·∫©m", columns=3, height=200)

        with gr.Column(scale=1):
            user_name = gr.Textbox(
                label="H·ªç v√† t√™n:", 
                value="Vinh"
                # placeholder="Nh·∫≠p h·ªç & t√™n c·ªßa b·∫°n"
            )
            phone_number = gr.Textbox(
                label="S·ªë ƒëi·ªán tho·∫°i:", 
                value="0868669999"
                # placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
            )
            address = gr.Textbox(
                label="ƒê·ªãa ch·ªâ:", 
                value="H·ªì Ch√≠ Minh"
                # placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ"
            )
            session_dropdown = gr.Dropdown(label="Danh s√°ch l·ªãch s·ª≠ chat", choices=[], value=None)
            refresh_sessions = gr.Button("L·∫•y danh s√°ch l·ªãch s·ª≠ chat")
            load_session_btn = gr.Button("T·∫£i l·∫°i cu·ªôc tr√≤ chuy·ªán")
            new_session_btn = gr.Button("T·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi")

    # Li√™n k·∫øt s·ª± ki·ªán
    for btn, msg_text in zip(
        [recommend_1, recommend_2, recommend_3, recommend_4],
        ["Cho t√¥i xem danh s√°ch s·∫£n ph·∫©m b√™n b·∫°n?", "T√¥i c·∫ßn t√¨m h·ªôp ƒë·ªÉ t√¥ v√≠t?", "C√≥ b√°n ƒë·ªìng h·ªì v·∫°n nƒÉng kh√¥ng?", "Th√¥ng tin ƒë·ªãa ch·ªâ c·ªßa shop ·ªü ƒë√¢u?"]
    ):
        btn.click(
            lambda text=msg_text: recommend_handler(text),
            outputs=msg
        ).then(
            chatbot.chat,
            inputs=[msg, chatbot_interface, phone_number, address, user_name],
            outputs=[msg, chatbot_interface, image_gallery]
        )

    submit_btn.click(
        chatbot.chat,
        inputs=[msg, chatbot_interface, phone_number, address, user_name],
        outputs=[msg, chatbot_interface, image_gallery, buy_now_html]
    )

    msg.submit(
        chatbot.chat,
        inputs=[msg, chatbot_interface, phone_number, address, user_name],
        outputs=[msg, chatbot_interface, image_gallery, buy_now_html]
    )

    refresh_sessions.click(
        get_session_choices,
        inputs=[phone_number],
        outputs=session_dropdown,
        queue=False
    )
    load_session_btn.click(
        load_chat_session,
        inputs=[session_dropdown, phone_number],
        outputs=[chatbot_interface, msg, image_gallery],
        queue=False
    )
    new_session_btn.click(
        new_session_handler,
        inputs=[phone_number],
        outputs=[chatbot_interface, msg, image_gallery],
        queue=False
    )

demo.launch(share=True)



